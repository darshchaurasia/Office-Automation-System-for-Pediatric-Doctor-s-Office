package ui;

import java.util.Optional;

import dao.PatientDAO;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import model.Patient;

public class PatientListScreen extends Application {

    private TableView<Patient> table = new TableView<>();
    private ObservableList<Patient> data = FXCollections.observableArrayList();
    private PatientDAO patientDAO = new PatientDAO();

    @Override
    public void start(Stage primaryStage) {
        TableColumn<Patient, String> firstNameCol = new TableColumn<>("First Name");
        firstNameCol.setCellValueFactory(new PropertyValueFactory<>("firstName"));

        TableColumn<Patient, String> lastNameCol = new TableColumn<>("Last Name");
        lastNameCol.setCellValueFactory(new PropertyValueFactory<>("lastName"));

        TableColumn<Patient, String> contactInfoCol = new TableColumn<>("Contact Info");
        contactInfoCol.setCellValueFactory(new PropertyValueFactory<>("contactInfo"));

        table.getColumns().add(firstNameCol);
        table.getColumns().add(lastNameCol);
        table.getColumns().add(contactInfoCol);

        loadData();

        Button addButton = new Button("Add");
        addButton.setOnAction(e -> addPatient());

        Button editButton = new Button("Edit");
        editButton.setOnAction(e -> editSelectedPatient());

        Button deleteButton = new Button("Delete");
        deleteButton.setOnAction(e -> deleteSelectedPatient());

        HBox buttonHBox = new HBox(10, addButton, editButton, deleteButton);

        VBox mainVBox = new VBox(10, table, buttonHBox);
        mainVBox.setPadding(new javafx.geometry.Insets(10));

        Scene scene = new Scene(mainVBox, 600, 400);
        primaryStage.setTitle("Patient List View");
        primaryStage.setScene(scene);
        primaryStage.show();
        
        
     
    }
    private void loadData() {
        data.clear();
        data.addAll(patientDAO.getAllPatients());
        table.setItems(data);
    }

    private void addPatient() {
        // Create the custom dialog.
        Dialog<Patient> dialog = new Dialog<>();
        dialog.setTitle("Add New Patient");

        // Set the button types.
        ButtonType saveButtonType = new ButtonType("Save", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(saveButtonType, ButtonType.CANCEL);

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new javafx.geometry.Insets(20, 150, 10, 10));

        TextField firstNameField = new TextField();
        firstNameField.setPromptText("First Name");
        TextField lastNameField = new TextField();
        lastNameField.setPromptText("Last Name");
        TextField contactInfoField = new TextField();
        contactInfoField.setPromptText("Contact Info");
        // Add more fields as needed for birthday, insuranceInfo, pharmacyInfo

        grid.add(new Label("First Name:"), 0, 0);
        grid.add(firstNameField, 1, 0);
        grid.add(new Label("Last Name:"), 0, 1);
        grid.add(lastNameField, 1, 1);
        grid.add(new Label("Contact Info:"), 0, 2);
        grid.add(contactInfoField, 1, 2);
        // Continue adding fields as necessary

        dialog.getDialogPane().setContent(grid);

        // Request focus on the first name field by default.
        Platform.runLater(() -> firstNameField.requestFocus());

        // Convert the result to a patient when the save button is clicked.
        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == saveButtonType) {
                Patient newPatient = new Patient(
                    0, // Assuming the ID is generated by the database
                    firstNameField.getText(),
                    lastNameField.getText(),
                    "", // Placeholder for birthday
                    contactInfoField.getText(),
                    "", // Placeholder for insuranceInfo
                    ""  // Placeholder for pharmacyInfo
                );
                return newPatient; // Return the new patient for further processing
            }
            return null;
        });

        Optional<Patient> result = dialog.showAndWait();

        result.ifPresent(newPatient -> {
            try {
                // Save the new patient via PatientDAO
                patientDAO.savePatient(newPatient);
                // If savePatient does not refresh the ID and other autogenerated fields, you might need to fetch the patient again
                
                // Add the new patient to the observable list and refresh the table view
                data.add(newPatient);
                table.refresh();
                
                // Optionally, reload data from the database to ensure the table view is up-to-date
                // loadData();
            } catch (Exception e) {
                e.printStackTrace(); // Log the exception
                showAlert("Error", "Failed to save the new patient.");
            }
        });
    }




    private void editSelectedPatient() {
        Patient selectedPatient = table.getSelectionModel().getSelectedItem();
        if (selectedPatient == null) {
            showAlert("Edit Error", "No patient selected. Please select a patient to edit.");
            return;
        }

        Dialog<Patient> dialog = new Dialog<>();
        dialog.setTitle("Edit Patient");

        ButtonType saveButtonType = new ButtonType("Save", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(saveButtonType, ButtonType.CANCEL);

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new javafx.geometry.Insets(20, 150, 10, 10));

        TextField firstName = new TextField(selectedPatient.getFirstName());
        TextField lastName = new TextField(selectedPatient.getLastName());
        TextField contactInfo = new TextField(selectedPatient.getContactInfo());

        grid.add(new Label("First Name:"), 0, 0);
        grid.add(firstName, 1, 0);
        grid.add(new Label("Last Name:"), 0, 1);
        grid.add(lastName, 1, 1);
        grid.add(new Label("Contact Info:"), 0, 2);
        grid.add(contactInfo, 1, 2);

        dialog.getDialogPane().setContent(grid);

        Platform.runLater(firstName::requestFocus);

        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == saveButtonType) {
                selectedPatient.setFirstName(firstName.getText());
                selectedPatient.setLastName(lastName.getText());
                selectedPatient.setContactInfo(contactInfo.getText());
                return selectedPatient;
            }
            return null;
        });

        Optional<Patient> result = dialog.showAndWait();

        result.ifPresent(patient -> {
            patientDAO.updatePatient(patient); // Save the edited patient details
            loadData(); // Refresh the data in the TableView
        });
    }


    private void deleteSelectedPatient() {
        Patient selected = table.getSelectionModel().getSelectedItem();
        if (selected != null) {
            patientDAO.deletePatient(selected.getPatientID());
            data.remove(selected); // Update the observable list
            System.out.println("Deleted Patient: " + selected.getFirstName());
        } else {
            showAlert("Delete Error", "No patient selected. Please select a patient to delete.");
        }
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
